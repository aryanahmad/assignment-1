"""CSC148 Assignment 1 - Simulation=== CSC148 Fall 2018 ===Department of Computer Science,University of Toronto=== Module description ===This contains the main Simulation class that is actually responsible forcreating and running the simulation. You'll also find the function `sample_run`here at the bottom of the file, which you can use as a starting point to runyour simulation on a small configuration.Note that we have provided a fairly comprehensive list of attributes forSimulation already. You may add your own *private* attributes, but should notremove any of the existing attributes."""# You may import more things from these modules (e.g., additional types from# typing), but you may not import from any other modules.from typing import Dict, List, Anyimport algorithmsfrom algorithms import Directionfrom entities import Person, Elevatorfrom visualizer import Visualizerclass Simulation:    """The main simulation class.    === Attributes ===    arrival_generator: the algorithm used to generate new arrivals.    elevators: a list of the elevators in the simulation    moving_algorithm: the algorithm used to decide how to move elevators    num_floors: the number of floors    visualizer: the Pygame visualizer used to visualize this simulation    waiting: a dictionary of people waiting for an elevator             (keys are floor numbers, values are the list of waiting people)    #######################    # Tracking attributes #    #######################    rounds: the amount of rounds/ iterations that the simulation runs.    completion: the amount of people who are delivered to their floor.    """    arrival_generator: algorithms.ArrivalGenerator    elevators: List[Elevator]    moving_algorithm: algorithms.MovingAlgorithm    num_floors: int    visualizer: Visualizer    waiting: Dict[int, List[Person]]    rounds: int    completion: int    persons = int    wait_time = List[int]    def __init__(self,                 config: Dict[str, Any]) -> None:        """Initialize a new simulation using the given configuration."""        self.arrival_generator = config["arrival_generator"]        self.elevators = []        self.moving_algorithm = config["moving_algorithm"]        self.num_floors = config['num_floors']        self.waiting = {}        for i in range(self.num_floors + 1):            self.waiting[i] = []        for i in range(config["num_elevators"]):            self.elevators.append(Elevator(config["elevator_capacity"]))        # Tracking Attributes #        self.rounds = 0        self.completion = 0        self.persons = 0        self.wait_times = []        # Initialize the visualizer.        # Note that this should be called *after* the other attributes        # have been initialized.        self.visualizer = Visualizer(self.elevators,                                     self.num_floors,                                     config['visualize'])    ############################################################################    # Handle rounds of simulation.    ############################################################################    def run(self, num_rounds: int) -> Dict[str, Any]:        """Run the simulation for the given number of rounds.        Return a set of statistics for this simulation run, as specified in the        assignment handout.        Precondition: num_rounds >= 1.        Note: each run of the simulation starts from the same initial state        (no people, all elevators are empty and start at floor 1).        """        for i in range(num_rounds):            self.visualizer.render_header(i)            # Stage 1: generate new arrivals            self._generate_arrivals(i)            # Stage 2: leave elevators            self._handle_leaving()            # for elevator in self.elevators:                # print("RUN METHOD PASSENGERS: " , len(elevator.passengers))            # Stage 3: board elevators            self._handle_boarding()            # for elevator in self.elevators:                # print("AFTER BOARDING: " , len(elevator.passengers))            # Stage 4: move the elevators using the moving algorithm            self._move_elevators()            # Stage 5: make people who haven't arrived yet more angry            self._handle_anger_level()            # add an iteration to our iteration checker            self.rounds += 1            # Pause for 1 second            self.visualizer.wait(1)        return self._calculate_stats()    def _generate_arrivals(self, round_num: int) -> None:        """Generate and visualize new arrivals."""        # She's ready for the world!        q = self.arrival_generator        x = self.waiting        arri = q.generate(round_num)        for key, value in arri.items():            for people in value:                x[key].append(people)                self.persons += 1        self.visualizer.show_arrivals(arri)    def _handle_leaving(self) -> None:        """Handle people leaving elevators."""        e = self.elevators        t = self.wait_times        for elevators in e:            for personne in reversed(elevators.passengers):                if personne.target == elevators.current_floor:                    self.visualizer.show_disembarking(personne, elevators)                    elevators.passengers.remove(personne)                    print("fullness in leaving: " , elevators.fullness())                    self.completion += 1                    t.append(personne.wait_time)    def _handle_boarding(self) -> None:        """Handle boarding of people and visualize."""        # She's done and she's glowing(mattely)        for k, v in self.waiting.items():            for elevator in self.elevators:                # print("IN BOARDING FULLNESS", elevator.fullness())                for person in v:                    if person.start == elevator.current_floor:                        if elevator.fullness() <= 1:                            elevator.passengers.append(person)                            self.visualizer.show_boarding(person, elevator)                            v.remove(person)    def _move_elevators(self) -> None:        """Move the elevators in this simulation.        Use this simulation's moving algorithm to move the elevators.        """        # She's managing the elevators with poise and class <3 UGH her mind.        # TODO implement, and make sure the elevators are MOVING!!        elevators = self.elevators        waiting = self.waiting        floors = self.num_floors        q = self.moving_algorithm        self.visualizer.show_elevator_moves(elevators,                                            q.move_elevators(elevators, waiting,                                                             floors))    def _handle_anger_level(self) -> None:        for k, v in self.waiting.items():            for x in v:                x.wait_time += 1        for elevator in self.elevators:            for person in elevator.passengers:                person.wait_time += 1    ############################################################################    # Statistics calculations    ############################################################################    def _calculate_stats(self) -> Dict[str, int]:        """Report the statistics for the current run of this simulation.        """        holder = 0        highest_time = 0        lowest_time = 0        average_times = 0        if len(self.wait_times) != 0:            highest_time = max(self.wait_times)            lowest_time = min(self.wait_times)            for i in self.wait_times:                holder += i            average_times = holder / len(self.wait_times)        return {            # Finished: iterations, completed_persons            'num_iterations': self.rounds,            'total_people': self.persons,            'people_completed': self.completion,            'max_time': highest_time,            'min_time': lowest_time,            'avg_time': average_times        }def sample_run() -> Dict[str, int]:    """Run a sample simulation, and return the simulation statistics."""    filename = r'sample_arrivals.csv'    config = {        'num_floors': 5,        'num_elevators': 3,        'elevator_capacity': 2,        'num_people_per_round': 5,        # Random arrival generator with 6 max floors and 2 arrivals per round.        'arrival_generator': algorithms.FileArrivals(5, filename),        'moving_algorithm': algorithms.RandomAlgorithm(),        'visualize': True    }    sim = Simulation(config)    stats = sim.run(15)    return statsif __name__ == '__main__':    # Uncomment this line to run our sample simulation (and print the    # statistics generated by the simulation).    print(sample_run())    import python_ta    python_ta.check_all(config={        'extra-imports': ['entities', 'visualizer', 'algorithms', 'time'],        'max-nested-blocks': 4,        'max-attributes': 12,        'disable': ['R0201']    })